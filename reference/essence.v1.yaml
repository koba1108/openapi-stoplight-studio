openapi: 3.0.0
info:
  title: essence
  version: '1.0'
  description: This is API Document Sample.
  contact:
    name: ykoba
servers:
  - url: 'http://localhost:3000'
    description: local
paths:
  user/me:
    get:
      summary: プロフィール取得API
      tags:
        - user
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: get-users-me
      parameters: []
      description: 自分のプロフィール情報を取得する
    put:
      summary: 会員登録API
      tags:
        - user
      responses:
        '200':
          description: OK
      operationId: put-users-me
      description: 会員登録を行う
    post:
      summary: プロフィール更新API
      tags:
        - user
      responses:
        '200':
          description: OK
      operationId: post-users-me
      description: 自分のプロフィール情報を更新する
    delete:
      summary: 退会API
      tags:
        - user
      responses:
        '200':
          description: OK
      operationId: delete-users-me
      description: 退会処理を行う
    parameters: []
  'user/qa/{qa_id}':
    get:
      summary: よくある質問取得API
      tags:
        - qa
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QA'
              examples: {}
      operationId: get-qa
      description: よくある質問を取得する
    parameters:
      - schema:
          type: string
        name: qa_id
        in: path
        required: true
  user/login:
    post:
      summary: ログインAPI
      operationId: post-login
      responses:
        '200':
          description: OK
      description: ログインを行う
      tags:
        - login
      security: []
    parameters: []
  user/logout:
    post:
      summary: ログアウトAPI
      operationId: post-logout
      responses:
        '200':
          description: OK
      description: ログアウトを行う
      tags:
        - logout
    parameters: []
  'user/offers/{offer_id}':
    get:
      summary: オファー取得API
      tags:
        - offer
      responses:
        '200':
          description: OK
      operationId: get-offers
      description: |-
        企業から受けたオファーを取得する

        下記で条件指定できる
        1. ID指定（URLパスで指定）
        2. 応募済
        3. 見送り済
        4. マッチング済
      parameters:
        - schema:
            type: number
          in: query
          name: status
          description: |-
            1. 回答待ち
            2. マッチング
            3. お見送り
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: number
          in: query
          name: offset
          description: 取得開始位置
    parameters:
      - schema:
          type: string
        name: offer_id
        in: path
        required: true
  'user/offers/{project_id}/apply':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    put:
      summary: 応募API
      operationId: put-offers-project_id-apply
      responses:
        '200':
          description: OK
      description: 案件へ応募する
      tags:
        - offer
  'user/offers/{project_id}/skip':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    post:
      summary: オファーお見送りAPI
      operationId: post-offers-project_id-skip
      responses:
        '200':
          description: OK
      description: 企業から受けたオファーを見送る
      tags:
        - offer
  'user/offers/{project_id}/accept':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    post:
      summary: オファー受け入れAPI
      operationId: post-offers-project_id-accept
      responses:
        '200':
          description: OK
      description: 企業から受けたオファーを受け入れる
      tags:
        - offer
  'user/notifications/{notification_id}':
    parameters:
      - schema:
          type: string
        name: notification_id
        in: path
        required: true
    get:
      summary: お知らせ取得API
      tags:
        - notification
      responses:
        '200':
          description: OK
      operationId: get-notifications
      description: 管理者からのお知らせを取得する
  /user/password_reset:
    post:
      summary: ''
      operationId: post-users-password_reset
      responses:
        '200':
          description: OK
      description: パスワードリセット用のEメールを送信する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      security: []
      tags:
        - password_reset
    parameters: []
  /user/files:
    put:
      summary: ファイルアップロードAPI
      operationId: put-user-files
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ''
          headers:
            Location:
              schema:
                type: string
                format: uri
              required: true
              description: ファイルのURL
      description: 画像や書類などのファイルをアップロードする
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  description: ファイルデータ
                  format: binary
        description: ''
      parameters: []
      tags:
        - file
  '/user/messages/{company_id}':
    parameters:
      - schema:
          type: string
        name: company_id
        in: path
        required: true
    get:
      summary: メッセージ取得API
      tags:
        - message
      responses:
        '200':
          description: OK
      operationId: get-user-messages-company_id
      description: |-
        企業とのメッセージを取得する

        「もっと見る」用にページング機能付ける
    put:
      summary: メッセージ登録API
      operationId: put-user-messages-company_id
      responses:
        '201':
          description: Created
      description: |-
        企業へメッセージを送信する


        更新対象はURLでID指定
        マッチングしてない企業IDを指定したらValidationエラー
  '/user/favorites/projects/{project_id}':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    get:
      summary: お気に入り案件取得API
      tags:
        - project
      responses:
        '200':
          description: OK
      operationId: get-user-favorites-projects-project_id
      description: お気に入り案件を取得する
    put:
      summary: お気に入り案件登録API
      operationId: put-user-favorites-projects-project_id
      responses:
        '200':
          description: OK
      description: お気に入り案件を登録する
      security:
        - Authorization: []
    delete:
      summary: お気に入り案件削除API
      operationId: delete-user-favorites-projects-project_id
      responses:
        '200':
          description: OK
      description: お気に入り案件を削除する
      security:
        - Authorization: []
  '/user/projects/{project_id}/subscribe':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    put:
      summary: 案件情報更新通知登録API
      operationId: put-user-projects-project_id-subscribe
      responses:
        '200':
          description: OK
      description: 案件の情報更新通知の登録ができる
      tags:
        - project
    delete:
      summary: 案件情報更新通知削除API
      operationId: delete-user-projects-project_id-subscribe
      responses:
        '200':
          description: OK
      description: 案件の情報更新通知の削除ができる
  '/user/projects/{project_id}':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    get:
      summary: 案件検索API
      tags:
        - project
      responses:
        '200':
          description: OK
      operationId: get-user-projects-project_id
      description: 案件を検索する
  '/user/favorites/companies/{company_id}':
    parameters:
      - schema:
          type: string
        name: company_id
        in: path
        required: true
    get:
      summary: お気に入り企業取得API
      tags:
        - company
      responses:
        '200':
          description: OK
      operationId: get-user-favorites-companies-company_id
      description: お気に入り企業を取得する
    put:
      summary: お気に入り企業登録API
      operationId: put-user-favorites-companies-company_id
      responses:
        '200':
          description: OK
      description: お気に入り企業を登録する
    delete:
      summary: お気に入り企業削除API
      operationId: delete-user-favorites-companies-company_id
      responses:
        '200':
          description: OK
      description: お気に入り企業を削除する
  '/user/companies/{company_id}/subscribe':
    parameters:
      - schema:
          type: string
        name: company_id
        in: path
        required: true
    put:
      summary: 案件情報更新通知登録API
      operationId: put-user-companies-company_id-subscribe
      responses:
        '200':
          description: OK
      description: 企業の情報更新通知を登録する
      tags:
        - company
    delete:
      summary: 案件情報更新通知削除API
      operationId: delete-user-companies-company_id-subscribe
      responses:
        '200':
          description: OK
      description: 企業の情報更新通知を削除する
  '/user/articles/{article_id}':
    parameters:
      - schema:
          type: string
        name: article_id
        in: path
        required: true
    get:
      summary: 記事取得API
      tags:
        - article
      responses:
        '200':
          description: OK
      operationId: get-user-articles-article_id
      description: |-
        記事の情報を取得する

        下記で条件指定できる
        1. ID指定（URLパスで指定）
        2. カテゴリ
      parameters:
        - schema:
            type: number
          in: query
          name: category
          description: カテゴリ
  /user/search_options:
    put:
      summary: 検索条件登録API
      operationId: put-user-search_options
      responses:
        '201':
          description: Created
      description: 検索条件を登録する
      tags:
        - search_option
  '/user/search_options/{search_option_id}':
    parameters:
      - schema:
          type: string
        name: search_option_id
        in: path
        required: true
    get:
      summary: 検索条件取得API
      tags:
        - search_option
      responses:
        '200':
          description: OK
      operationId: get-user-search_options-search_option_id
      description: 検索条件を取得する
    post:
      summary: 検索条件更新API
      operationId: post-user-search_options-search_option_id
      responses:
        '200':
          description: OK
      description: 検索条件を更新する
      security:
        - Authorization: []
      parameters: []
    delete:
      summary: 検索条件削除API
      operationId: delete-user-search_options-search_option_id
      responses:
        '200':
          description: OK
      description: 検索条件を削除する
      security:
        - Authorization: []
  '/user/projects/{project_id}/certificates':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    put:
      summary: 実績証明書発行依頼API
      operationId: put-user-projects-project_id-certificates
      responses:
        '201':
          description: Created
      description: 案件への実績証明書の発行依頼をする
      tags:
        - certificate
  /user/settings/notifications:
    get:
      summary: 通知設定取得API
      tags:
        - setting
      responses:
        '200':
          description: OK
      operationId: get-user-settings-notifications
      description: 通知設定を取得する
    post:
      summary: 通知設定更新API
      operationId: post-user-settings-notifications
      responses:
        '200':
          description: OK
      description: 通知設定を変更する
  /user/inquiries:
    get:
      summary: 問い合わせ取得API
      tags:
        - inquiry
      responses:
        '200':
          description: OK
      operationId: get-user-inquiries
      description: 問い合わせを取得する
    put:
      summary: 問い合わせ登録API
      operationId: put-user-inquiries
      responses:
        '200':
          description: OK
      description: 問い合わせの登録をする
components:
  schemas:
    User:
      title: User
      type: object
      x-examples:
        example:
          todo: あとでやる
      description: User Model
      x-tags:
        - model
      properties:
        id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        nickname:
          type: string
          description: SNS連携時には、その名前が入る
        first_name:
          type: string
        last_name:
          type: string
        face_photo:
          $ref: '#/components/schemas/File'
        birthday:
          type: string
          format: date-time
          description: 形式：1985-11-08
        phone_number:
          type: string
        gender:
          type: number
          description: |-
            1. 男性
            2. 女性
            ※ LGBTの扱いはどうするか？
        post_code:
          type: string
          description: |-
            郵便番号（XXX-XXXX）
            参考：https://www.post.japanpost.jp/zipcode/download.html
        prefecture:
          type: number
          description: 都道府県コード（1 - 47）
        area:
          type: number
          description: |-
            市区町村コード
            参考：https://www.soumu.go.jp/main_content/000632830.pdf
        address:
          type: string
          description: 市区町村から後ろの住所
        employment_status:
          type: number
          description: |-
            1. 現職中
            2. 離職中
            3. 就業経験なし
            NULL: 未入力
        current_company_name:
          type: string
          description: 'NULL: 未入力'
        job_change_count:
          type: number
          description: 'NULL: 未入力'
        final_education:
          description: |-
            1. 中校卒
            2. 高校卒
            3. 短大卒
            4. 専門学校卒
            5. 大学卒
            6. 大学院卒
            99. その他
            NULL: 未入力
          type: number
        school_name:
          type: string
          description: 'NULL: 未入力'
        marital_status:
          description: |-
            1. 未婚
            2. 既婚
            NULL: 未入力
          type: number
        job_change_motivation:
          description: |-
            1. すぐ転職したい
            2. 3ヶ月後考えている
            3. 半年以内に考えている
            4. 1年以内に考えている
            5. 良いオファーがあれば検討
            6. 今は考えていない
          type: number
        side_job_motivation:
          type: number
        introduction_text:
          type: string
        english_skills:
          description: |-
            1. なし
            2. 初級（簡単な挨拶、辞書を使っての読み書き）
            3. 中級（日常会話、簡単な読み書き可能）
            4. 上級（ビジネスレベルの会話、読み書き）
            5. ネイティブレベル
            NULL: 未指定
          type: number
        toeic:
          type: number
          description: |-
            1. なし
            2. 〜215点
            3. 220点〜465点
            4. 470点〜725点
            5. 730点〜855点
            6. 860点〜
            NULL: 未入力

            参考：https://bit.ly/2XqqNdR
        toefl:
          type: number
          description: |-
            1. なし
            2. 60点未満
            3. 60点〜79点
            4. 80点～99点
            5. 100点～120点
            NULL: 未入力

            参考：https://progrit-media.jp/84
        experienced_occupation:
          type: array
          description: |-
            JSON型に職種IDの配列を入れる
            実装：https://teratail.com/questions/189136
          items:
            $ref: '#/components/schemas/Occupation'
        desired_occupations:
          type: array
          description: |-
            JSON型に職種IDの配列を入れる
            実装：https://teratail.com/questions/189136
          items:
            $ref: '#/components/schemas/Occupation'
        current_annual_income:
          type: number
        desired_annual_income:
          type: number
        desired_city_codes:
          type: array
          description: |-
            JSON型に市区町村コードの配列を入れる
            実装：https://teratail.com/questions/189136
          items:
            $ref: '#/components/schemas/Adress'
    QA:
      title: QA
      type: object
      description: QA Model
      x-tags:
        - model
      properties:
        id:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        title:
          type: string
          description: タイトル
        body:
          type: string
          description: リッチテキストエディターのhtmlが入ってる
        sort_no:
          type: number
          description: ソート順
        category:
          type: number
          description: |-
            NULL: その他
            ※ マスタ管理するか悩ましい
      required:
        - id
        - created_at
        - updated_at
        - title
        - body
        - sort_no
        - category
    File:
      title: File
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        type:
          type: number
          description: |-
            1. 顔写真
            2. 履歴書
            3. 職務経歴書
            ※ 実装時変えるかも
        original_url:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - type
        - original_url
        - created_at
        - updated_at
      description: File Model
      x-tags:
        - model
    Adress:
      title: Adress
      type: object
      properties:
        pref_code:
          type: number
          description: 都道府県コード
        pref_name:
          type: string
          description: 都道府県名
        city_code:
          type: number
          description: 市区町村コード
        city_name:
          type: string
          description: 市区町村名
      description: 住所コード
      x-tags:
        - model
    Occupation:
      title: Occupation
      type: object
      description: Occupation Model
      properties:
        category_id:
          type: number
        category_name:
          type: string
        category_sort_order:
          type: number
        id:
          type: number
        name:
          type: string
        sort_order:
          type: number
      required:
        - category_id
        - category_name
        - category_sort_order
        - id
        - name
        - sort_order
      x-tags:
        - model
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
security:
  - Authorization: []
