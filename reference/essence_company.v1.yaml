openapi: 3.0.0
info:
  title: Essence Company API
  version: '1.0'
  contact:
    name: ykoba
  description: This is Essence Company API Document.
servers:
  - url: 'http://localhost:3000/company'
    description: local
  - url: 'https://api.dev-domain/company'
    description: development
  - url: 'https://api.prod-domain/company'
    description: production
paths:
  '/offers/{offer_id}':
    parameters:
      - schema:
          type: string
        name: offer_id
        in: path
    get:
      summary: オファー取得API
      tags:
        - offer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  offers:
                    type: array
                    items:
                      $ref: ./offer.v1.yaml
                  pagination:
                    $ref: ./pagination.v1.yaml
                required:
                  - offers
                  - pagination
      operationId: get-offers-offer_id
      description: |-
        下記で条件指定できる
        1. ID指定（URLパスで指定）
        2. 応募済
        3. 見送り済
        4. マッチング済
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: number
          in: query
          name: offset
          description: 取得開始位置
  '/offers/{user_id}':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    put:
      summary: オファー送信API
      operationId: put-offers-user_id
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./offer.v1.yaml
      description: オファーを送信する
      tags:
        - offer
  '/offers/{offer_id}/accept':
    parameters:
      - schema:
          type: string
        name: offer_id
        in: path
        required: true
    post:
      summary: 応募承認API
      operationId: post-offers-offer_id-acceptt
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./offer.v1.yaml
      description: ユーザからの応募を承認する
      tags:
        - offer
  '/offers/{offer_id}/skip':
    parameters:
      - schema:
          type: string
        name: offer_id
        in: path
        required: true
    post:
      summary: 応募お見送りAPI
      operationId: post-offers-offer_id-skip
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./offer.v1.yaml
      description: ユーザからの応募を見送る
      tags:
        - offer
  '/favorites/users/{user_id}':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
    get:
      summary: お気に入りユーザ取得API
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: ./user.v1.yaml
                  pagination:
                    $ref: ./pagination.v1.yaml
                required:
                  - users
                  - pagination
      operationId: get-favorites-users-user_id
      description: お気に入りユーザを取得する
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: number
          in: query
          name: offset
          description: 取得開始位置
    delete:
      summary: お気に入りユーザ削除API
      operationId: delete-favorites-users-user_id
      responses:
        '204':
          description: No Content
      description: ユーザをお気に入りから削除する
      tags:
        - user
    put:
      summary: お気に入りユーザ登録API
      operationId: put-favorites-users-user_id
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: number
                required:
                  - user_id
      description: ユーザをお気に入り登録する
  '/notifications/{notificaiton_id}':
    parameters:
      - schema:
          type: string
        name: notificaiton_id
        in: path
    get:
      summary: お知らせ取得API
      tags:
        - notification
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: ./notification.v1.yaml
                  pagination:
                    $ref: ./pagination.v1.yaml
                required:
                  - notifications
                  - pagination
      operationId: get-notifications-notificaiton_id
      description: |-
        管理者からのお知らせを取得する

        下記で条件指定できる
        1. ID指定（URLパスで指定）
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: number
          in: query
          name: offset
          description: 取得開始位置
  /me:
    get:
      summary: プロフィール取得API
      tags:
        - company_user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./company_user.v1.yaml
      operationId: get-me
      description: 自分のプロフィール情報を取得する
    post:
      summary: プロフィール更新API
      operationId: post-me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./company_user.v1.yaml
              examples: {}
      description: 自分のプロフィール情報を更新する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      tags:
        - company_user
  '/users/{user_id}':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
    get:
      summary: ユーザ検索API
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: ./user.v1.yaml
                  pagination:
                    $ref: ./pagination.v1.yaml
                required:
                  - users
                  - pagination
      operationId: get-users-user_id
      description: |-
        ユーザ情報を取得する

        下記で条件指定できる
        1. ID指定（URLパスで指定）
        2. フリーワード
        ※ UIに合わせて増やす
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: number
          in: query
          name: offset
          description: 取得開始位置
        - schema:
            type: string
          in: query
          name: keyword
          description: フリーワード
  '/search_options/{search_option_id}':
    parameters:
      - schema:
          type: string
        name: search_option_id
        in: path
    get:
      summary: ユーザ検索条件取得API
      tags:
        - search_option
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  options:
                    type: array
                    items:
                      $ref: ./search_option.v1.yaml
                  pagination:
                    $ref: ./pagination.v1.yaml
                required:
                  - options
                  - pagination
      operationId: get-search_options-search_option_id
      description: ユーザの検索条件を取得できる
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: number
          in: query
          name: offset
          description: 取得開始位置
    delete:
      summary: ユーザ検索条件削除API
      operationId: delete-search_options-search_option_id
      responses:
        '204':
          description: No Content
      description: ユーザの検索条件を削除できる
      tags:
        - search_option
    post:
      summary: ユーザ検索条件更新API
      operationId: post-search_options-search_option_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./search_option.v1.yaml
      description: ユーザの検索条件を更新できる
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                option:
                  type: string
                  description: 検索フォームで使うjsonをbase64エンコードした値
              required:
                - name
                - option
      tags:
        - search_option
  /search_options:
    put:
      summary: ユーザ検索条件登録API
      operationId: put-search_options
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./search_option.v1.yaml
      description: ユーザの検索条件を登録できる
      tags:
        - search_option
  '/users/{user_id}/subscribe':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    put:
      summary: ユーザ情報更新通知登録API
      operationId: put-users-user_id-subscribe
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: number
      tags:
        - user
      description: ユーザの情報更新通知の登録ができる
    delete:
      summary: ユーザ情報更新通知削除API
      operationId: delete-users-user_id-subscribe
      responses:
        '204':
          description: No Content
      tags:
        - user
      description: ユーザの情報更新通知の削除ができる
  '/qa/{qa_id}':
    get:
      summary: よくある質問取得API
      tags:
        - qa
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  qa:
                    type: array
                    items:
                      $ref: ./qa.v1.yaml
      operationId: get-qa
      description: よくある質問を取得する
      parameters: []
    parameters:
      - schema:
          type: string
        name: qa_id
        in: path
        required: true
  /login:
    post:
      summary: ログインAPI
      operationId: post-login
      responses:
        '200':
          description: OK
      description: ログインする
  /logout:
    post:
      summary: ログアウトAPI
      operationId: post-logout
      responses:
        '200':
          description: OK
      description: ログアウトする
  '/projects/{project_id}':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    get:
      summary: 案件検索API
      tags:
        - project
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: ./project.v1.yaml
                  '':
                    $ref: ./pagination.v1.yaml
      operationId: get-projects-project_id
      description: 企業の案件情報を取得する
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: number
          in: query
          name: offset
          description: 取得開始位置
    post:
      summary: 案件更新API
      operationId: post-projects-project_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./project.v1.yaml
      description: 案件情報を更新する
      tags:
        - project
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./project.v1.yaml
    delete:
      summary: 案件削除API
      operationId: delete-projects-project_id
      responses:
        '204':
          description: No Content
      description: 案件を削除する
      tags:
        - project
  /projects:
    put:
      summary: 案件登録API
      operationId: put-projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./project.v1.yaml
      description: 案件情報を登録する
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./project.v1.yaml
      tags:
        - project
  /information:
    get:
      summary: 企業情報取得API
      tags:
        - company
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./company.v1.yaml
      operationId: get-information
      description: 所属している企業情報を取得する
      parameters: []
    post:
      summary: 企業情報更新API
      operationId: post-information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./company.v1.yaml
      description: 所属している企業情報を更新する
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./company.v1.yaml
  /company_users:
    put:
      summary: 企業担当者登録API
      operationId: put-company_users
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./company_user.v1.yaml
      description: 所属している企業の担当者を登録する
      tags:
        - company_user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
              required:
                - name
                - email
  '/company_users/{company_user_id}':
    parameters:
      - schema:
          type: string
        name: company_user_id
        in: path
        required: true
    get:
      summary: 企業担当者取得API
      tags:
        - company_user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  company_users:
                    type: array
                    items:
                      $ref: ./company_user.v1.yaml
                  pagination:
                    $ref: ./pagination.v1.yaml
      operationId: get-company_users-company_user_id
      description: 所属している企業の担当者を取得する
    post:
      summary: 企業担当者更新API
      operationId: post-company_users-company_user_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./company_user.v1.yaml
      description: 所属している企業の担当者を更新する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
      tags:
        - company_user
    delete:
      summary: 企業担当者削除API
      operationId: delete-company_users-company_user_id
      responses:
        '204':
          description: No Content
      description: 所属している企業の担当者を削除する
      tags:
        - company_user
  '/articles/{article_id}':
    parameters:
      - schema:
          type: string
        name: article_id
        in: path
        required: true
    get:
      summary: 記事取得API
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      $ref: ./article.v1.yaml
                  pagination:
                    $ref: ./pagination.v1.yaml
      operationId: get-articles-article_id
      description: |-
        記事情報を取得する

        下記で条件指定できる
        1. ID指定（URLパスで指定）
        2. カテゴリ
      parameters:
        - schema:
            type: number
          in: query
          name: category
          description: カテゴリ
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: number
          in: query
          name: offset
          description: 取得開始位置
  '/certificates/{certificate_id}':
    parameters:
      - schema:
          type: string
        name: certificate_id
        in: path
        required: true
    get:
      summary: 実績証明書_取得API
      tags:
        - certificate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificates:
                    type: array
                    items:
                      $ref: ./certificate.v1.yaml
                  pagination:
                    $ref: ./pagination.v1.yaml
      operationId: get-certificates-certificate_id
      description: |-
        実績証明書情報を取得する

        下記で条件指定できる
        1. ID指定（URLパスで指定）
        2. 未対応
        3. 発行済
        4. ユーザ指定
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: number
                status:
                  type: number
                  description: |-
                    1. 未対応のみ
                    2. 発行済のみ
                limit:
                  type: number
                  description: 取得件数
                offset:
                  type: number
                  description: 取得開始位置
        description: ''
    post:
      summary: 実績証明書_更新API
      operationId: post-certificates-certificate_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./certificate.v1.yaml
      tags:
        - certificate
      description: 実績証明書情報を更新する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
  /certificates:
    parameters: []
    put:
      summary: 実績証明書_登録API
      operationId: put-certificates-user_id
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./certificate.v1.yaml
      description: 実績証明書情報を登録する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                project_id:
                  type: number
                user_id:
                  type: number
              required:
                - file
                - project_id
                - user_id
      tags:
        - certificate
  /settings/notifications:
    get:
      summary: 通知設定取得API
      tags:
        - setting
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./notification_setting.v1.yaml
      operationId: get-user-settings-notifications
      description: 通知設定を取得する
    post:
      summary: 通知設定更新API
      operationId: post-user-settings-notifications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./notification_setting.v1.yaml
              examples: {}
      description: 通知設定を変更する
      tags:
        - setting
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./notification_setting.v1.yaml
    parameters: []
  /inquiries:
    get:
      summary: 問い合わせ取得API
      tags:
        - inquiry
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: ./message.v1.yaml
                  cursor:
                    $ref: ./cursor.v1.yaml
                required:
                  - messages
                  - cursor
      operationId: get-user-inquiries
      description: 問い合わせを取得する
      parameters:
        - schema:
            type: number
          in: query
          name: cursor
          description: カーソル
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: string
          in: query
          name: keyword
          description: キーワード
    put:
      summary: 問い合わせ登録API
      operationId: put-user-inquiries
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./message.v1.yaml
      description: 問い合わせの登録をする
      tags:
        - inquiry
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                file:
                  type:
                    - string
                    - 'null'
                  format: binary
        description: 問い合わせの登録をする
    parameters: []
components:
  schemas: {}
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
security:
  - undefined: []
