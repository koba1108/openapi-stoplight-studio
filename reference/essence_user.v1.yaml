openapi: 3.0.0
info:
  title: Essence User API
  version: '1.0'
  description: This is Essence User API Document.
  contact:
    name: ykoba
servers:
  - url: 'http://localhost:3000/user'
    description: local
  - description: development
    url: 'https://api.dev-domain/user'
  - url: 'https://api.prod-domain/user'
    description: production
paths:
  /me:
    get:
      summary: プロフィール取得API
      tags:
        - user
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: ./user.v1.yaml
      operationId: get-users-me
      parameters: []
      description: 自分のプロフィール情報を取得する
    put:
      summary: 会員登録API
      tags:
        - user
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./user.v1.yaml
      operationId: put-users-me
      description: 会員登録を行う
    post:
      summary: プロフィール更新API
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./user.v1.yaml
      operationId: post-users-me
      description: 自分のプロフィール情報を更新する
    delete:
      summary: 退会API
      tags:
        - user
      responses:
        '204':
          description: No Content
      operationId: delete-users-me
      description: 退会処理を行う
    parameters: []
  '/qa/{qa_id}':
    get:
      summary: よくある質問取得API
      tags:
        - qa
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./qa.v1.yaml
              examples: {}
      operationId: get-qa
      description: よくある質問を取得する
    parameters:
      - schema:
          type: string
        name: qa_id
        in: path
        required: true
  /login:
    post:
      summary: ログインAPI
      operationId: post-login
      responses:
        '200':
          description: OK
      description: ログインを行う
      tags:
        - login
      security: []
    parameters: []
  /logout:
    post:
      summary: ログアウトAPI
      operationId: post-logout
      responses:
        '200':
          description: OK
      description: ログアウトを行う
      tags:
        - logout
    parameters: []
  '/offers/{offer_id}':
    get:
      summary: オファー取得API
      tags:
        - offer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  offers:
                    type: array
                    items:
                      $ref: ./offer.v1.yaml
                  cursor:
                    $ref: ./cursor.v1.yaml
                required:
                  - offers
                  - cursor
      operationId: get-offers
      description: |-
        企業から受けたオファーを取得する

        下記で条件指定できる
        1. ID指定（URLパスで指定）
        2. 応募済
        3. 見送り済
        4. マッチング済
      parameters:
        - schema:
            type: number
          in: query
          name: status
          description: |-
            1. 回答待ち
            2. マッチング
            3. お見送り
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: number
          in: query
          name: cursor
          description: 取得開始位置
    parameters:
      - schema:
          type: string
        name: offer_id
        in: path
        required: true
  '/offers/{project_id}':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    put:
      summary: 応募API
      operationId: put-offers-project_id
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  project_id:
                    type: number
      description: 案件へ応募する
      tags:
        - offer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
  '/offers/{offer_id}/skip':
    parameters:
      - schema:
          type: string
        name: offer_id
        in: path
        required: true
    post:
      summary: オファーお見送りAPI
      operationId: post-offers-offer_id-skip
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  offer_id:
                    type: number
                required:
                  - offer_id
      description: 企業から受けたオファーを見送る
      tags:
        - offer
  '/offers/{offer_id}/accept':
    parameters:
      - schema:
          type: string
        name: offer_id
        in: path
        required: true
    post:
      summary: オファー受け入れAPI
      operationId: post-offers-offer_id-accept
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  offer_id:
                    type: number
                required:
                  - offer_id
      description: 企業から受けたオファーを受け入れる
      tags:
        - offer
  '/notifications/{notification_id}':
    parameters:
      - schema:
          type: string
        name: notification_id
        in: path
        required: true
    get:
      summary: お知らせ取得API
      tags:
        - notification
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: ./notification.v1.yaml
                  cursor:
                    $ref: ./cursor.v1.yaml
      operationId: get-notifications
      description: 管理者からのお知らせを取得する
      parameters:
        - schema:
            type: number
          in: query
          name: cursor
          description: カーソル
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
  /password_reset:
    post:
      summary: パスワード再設定API
      operationId: post-users-password_reset
      responses:
        '200':
          description: OK
      description: パスワードリセット用のEメールを送信する
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      security: []
      tags:
        - password_reset
    parameters: []
  /files:
    put:
      summary: ファイルアップロードAPI
      operationId: put-user-files
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./file.v1.yaml
          headers:
            Location:
              schema:
                type: string
                format: uri
              required: true
              description: ファイルのURL
      description: 画像や書類などのファイルをアップロードする
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: ファイルデータ
                  format: binary
                  type: string
        description: ''
      parameters: []
      tags:
        - file
    parameters: []
  '/messages/{company_id}':
    parameters:
      - schema:
          type: string
        name: company_id
        in: path
        required: true
    get:
      summary: メッセージ取得API
      tags:
        - message
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: ./message.v1.yaml
                  cursor:
                    $ref: ./cursor.v1.yaml
                required:
                  - messages
                  - cursor
      operationId: get-user-messages-company_id
      description: |-
        企業とのメッセージを取得する

        「もっと見る」用にページング機能付ける
      parameters:
        - schema:
            type: number
          in: query
          name: cursor
          description: カーソル
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
    put:
      summary: メッセージ登録API
      operationId: put-user-messages-company_id
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./message.v1.yaml
      description: |-
        企業へメッセージを送信する


        更新対象はURLでID指定
        マッチングしてない企業IDを指定したらValidationエラー
      tags:
        - message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: 本文
                file:
                  type: string
                  format: binary
                  description: 添付ファイル
              required:
                - text
        description: ''
  '/favorites/projects/{project_id}':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    get:
      summary: お気に入り案件取得API
      tags:
        - project
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: ./project.v1.yaml
                  pagination:
                    $ref: ./pagination.v1.yaml
                required:
                  - projects
              examples: {}
      operationId: get-user-favorites-projects-project_id
      description: お気に入り案件を取得する
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: number
          in: query
          name: offset
          description: 取得開始位置
        - schema:
            type: string
          in: query
          name: order_by
          description: |-
            ソート順

            1. 作成日時
            2. 更新日時
            3. お気に入り登録日時
    put:
      summary: お気に入り案件登録API
      operationId: put-user-favorites-projects-project_id
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  project_id:
                    type: number
      description: お気に入り案件を登録する
      security:
        - Authorization: []
      tags:
        - project
    delete:
      summary: お気に入り案件削除API
      operationId: delete-user-favorites-projects-project_id
      responses:
        '204':
          description: No Content
      description: お気に入り案件を削除する
      security:
        - Authorization: []
      tags:
        - project
  '/projects/{project_id}/subscribe':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    put:
      summary: 案件情報更新通知登録API
      operationId: put-user-projects-project_id-subscribe
      responses:
        '201':
          description: Created
      description: 案件の情報更新通知の登録ができる
      tags:
        - project
    delete:
      summary: 案件情報更新通知削除API
      operationId: delete-user-projects-project_id-subscribe
      responses:
        '204':
          description: No Content
      description: 案件の情報更新通知の削除ができる
      tags:
        - project
  '/projects/{project_id}':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    get:
      summary: 案件検索API
      tags:
        - project
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: ./project.v1.yaml
                  cursor:
                    $ref: ./cursor.v1.yaml
                required:
                  - projects
                  - cursor
      operationId: get-user-projects-project_id
      description: 案件を検索する
      parameters:
        - schema:
            type: number
          in: query
          name: cursor
          description: カーソル
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: string
          in: query
          name: 'todo: search option'
          description: 'todo: その他の検索条件'
  '/favorites/companies/{company_id}':
    parameters:
      - schema:
          type: string
        name: company_id
        in: path
        required: true
    get:
      summary: お気に入り企業取得API
      tags:
        - company
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  companies:
                    type: array
                    items:
                      $ref: ''
                  pagination:
                    $ref: ./pagination.v1.yaml
      operationId: get-user-favorites-companies-company_id
      description: お気に入り企業を取得する
      parameters:
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: number
          in: query
          name: offset
          description: 取得開始位置
        - schema:
            type: string
          in: query
          name: order_by
          description: |-
            ソート順

            1. 作成日時
            2. 更新日時
            3. お気に入り登録日時
    put:
      summary: お気に入り企業登録API
      operationId: put-user-favorites-companies-company_id
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  company_id:
                    type: number
      description: お気に入り企業を登録する
      tags:
        - company
    delete:
      summary: お気に入り企業削除API
      operationId: delete-user-favorites-companies-company_id
      responses:
        '204':
          description: No Content
      description: お気に入り企業を削除する
      tags:
        - company
  '/companies/{company_id}/subscribe':
    parameters:
      - schema:
          type: string
        name: company_id
        in: path
        required: true
    put:
      summary: 企業情報更新通知登録API
      operationId: put-user-companies-company_id-subscribe
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  company_id:
                    type: number
      description: 企業の情報更新通知を登録する
      tags:
        - company
    delete:
      summary: 企業情報更新通知削除API
      operationId: delete-user-companies-company_id-subscribe
      responses:
        '204':
          description: No Content
      description: 企業の情報更新通知を削除する
      tags:
        - company
  '/articles/{article_id}':
    parameters:
      - schema:
          type: string
        name: article_id
        in: path
        required: true
    get:
      summary: 記事取得API
      tags:
        - article
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      $ref: ./article.v1.yaml
                  pagination:
                    $ref: ./pagination.v1.yaml
      operationId: get-user-articles-article_id
      description: |-
        記事の情報を取得する

        下記で条件指定できる
        1. ID指定（URLパスで指定）
        2. カテゴリ
      parameters:
        - schema:
            type: number
          in: query
          name: category
          description: カテゴリ
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: number
          in: query
          name: offset
          description: 取得開始位置
  /search_options:
    put:
      summary: 検索条件登録API
      operationId: put-user-search_options
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./search_option.v1.yaml
      description: 検索条件を登録する
      tags:
        - search_option
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                option:
                  type: string
                  description: 検索フォームで使うjsonをbase64した値
                title:
                  type: string
              required:
                - option
                - title
        description: |-
          日本語が含まれている場合は、btoa() が使えないので、ライブラリを利用する
          例：https://github.com/dankogai/js-base64#readme
    parameters: []
  '/search_options/{search_option_id}':
    parameters:
      - schema:
          type: string
        name: search_option_id
        in: path
        required: true
    get:
      summary: 検索条件取得API
      tags:
        - search_option
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  search_options:
                    type: array
                    items:
                      $ref: ./search_option.v1.yaml
                  pagination:
                    $ref: ./pagination.v1.yaml
      operationId: get-user-search_options-search_option_id
      description: 検索条件を取得する
    post:
      summary: 検索条件更新API
      operationId: post-user-search_options-search_option_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./search_option.v1.yaml
      description: 検索条件を更新する
      security:
        - Authorization: []
      parameters: []
      tags:
        - search_option
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                option:
                  type: string
                  description: 検索フォームで使うjsonをbase64した値
                title:
                  type: string
              required:
                - option
                - title
    delete:
      summary: 検索条件削除API
      operationId: delete-user-search_options-search_option_id
      responses:
        '204':
          description: No Content
      description: 検索条件を削除する
      security:
        - Authorization: []
      tags:
        - search_option
  '/projects/{project_id}/certificates':
    parameters:
      - schema:
          type: string
        name: project_id
        in: path
        required: true
    put:
      summary: 実績証明書発行依頼API
      operationId: put-user-projects-project_id-certificates
      responses:
        '201':
          description: Created
      description: 案件への実績証明書の発行依頼をする
      tags:
        - certificate
  /settings/notifications:
    get:
      summary: 通知設定取得API
      tags:
        - setting
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./notification_setting.v1.yaml
      operationId: get-user-settings-notifications
      description: 通知設定を取得する
    post:
      summary: 通知設定更新API
      operationId: post-user-settings-notifications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./notification_setting.v1.yaml
              examples: {}
      description: 通知設定を変更する
      tags:
        - setting
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./notification_setting.v1.yaml
    parameters: []
  /inquiries:
    get:
      summary: 問い合わせ取得API
      tags:
        - inquiry
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: ./message.v1.yaml
                  cursor:
                    $ref: ./cursor.v1.yaml
                required:
                  - messages
                  - cursor
      operationId: get-user-inquiries
      description: 問い合わせを取得する
      parameters:
        - schema:
            type: number
          in: query
          name: cursor
          description: カーソル
        - schema:
            type: number
          in: query
          name: limit
          description: 取得件数
        - schema:
            type: string
          in: query
          name: keyword
          description: キーワード
    put:
      summary: 問い合わせ登録API
      operationId: put-user-inquiries
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./message.v1.yaml
      description: 問い合わせの登録をする
      tags:
        - inquiry
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                file:
                  type:
                    - string
                    - 'null'
                  format: binary
        description: 問い合わせの登録をする
    parameters: []
  '/companies/{company_id}':
    parameters:
      - schema:
          type: string
        name: company_id
        in: path
        required: true
    get:
      summary: 企業情報取得API
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./company.v1.yaml
      operationId: get-companies-company_id
      description: 企業情報を取得する
components:
  schemas: {}
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
security:
  - Authorization: []
